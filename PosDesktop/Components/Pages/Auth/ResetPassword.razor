@page "/auth/reset-password/{token}"
@using ApiClient
@using PosDesktop.Services.Interfaces
@layout GuestLayout
@inject IAuthService _authService
@inject NavigationManager Navigation
@inject IJSRuntime _jsRuntime
@inject IToastService ToastService

<section class="body1">
    @if (!string.IsNullOrEmpty(token))
    {
        <div class="login-container row">

            <div class="col-md-6 col-sm-12">
                <EditForm Model="@model" OnValidSubmit="@HandleReset">
                    <DataAnnotationsValidator />
                    <div class="login-box">
                        <h2 class="text-center">Reset Password</h2>
                        <div class="form-group">
                            <div>
                                <input type="email" placeholder="Email" @bind-value="model.Email">
                                <span class="text-danger">@GetErrorMessage(nameof(model.Email))</span>
                            </div>
                            <div>
                                <div class="position-relative">
                                    <input type="@(_showPassword ? "text" : "password")"
                                           placeholder="Password"
                                           @bind-value="model.Password"
                                           class="form-control" />
                                    <span class="toggle-icon" @onclick="TogglePasswordVisibility">
                                        @(_showPassword ? "🙈" : "👁️")
                                    </span>
                                </div>
                                <span class="text-danger">@GetErrorMessage(nameof(model.Password))</span>
                            </div>

                            <div>
                                <div class="position-relative">
                                    <input type="@(_showConfirmPassword ? "text" : "password")"
                                           placeholder="Confirm Password"
                                           @bind-value="model.ConfirmPassword"
                                           class="form-control" />
                                    <span class="toggle-icon" @onclick="ToggleConfirmPasswordVisibility">
                                        @(_showConfirmPassword ? "🙈" : "👁️")
                                    </span>
                                </div>
                                <span class="text-danger">@GetErrorMessage(nameof(model.ConfirmPassword))</span>
                            </div>
                        </div>

                    </div>
                    <div class="d-flex justify-content-between align-content-center mt-2 mb-3">

                        <div class="">
                            <div class="d-flex justify-content-between">
                                <a href="/auth/login">Remembered Password?</a>
                            </div>
                        </div>
                    </div>
                    <div class="form-group col-md-12">
                        <div class="row">
                            <div class="col-md-8">
                                <button class="btn btn-block btn-outline-info btn-md">Reset Password</button>
                            </div>
                            <div class="col-md-4">
                                <a href="/auth/forgot-password" class="" >Resend</a>
                            </div>
                        </div>
                    </div>
                </EditForm>
            </div>

            <div class="col-md-6 col-sm-12">
                <div class="fingerprint-box mb-1">
                    <h4>With Unique Code</h4>
                </div>
                <div class="right-section">
                    <div class="pinpad-container">
                        <h4 class="text-light">
                            Forgot your  password? kindly provided your registered email address to get a password reset code
                        </h4>
                    </div>
                </div>
            </div>

        </div>
    }
    else
    {
        <div class="login-container row">
            <div class="col-md-6 col-sm-12">
                <p>Code parameter is invalid</p>
            </div>
        </div>

    }
</section>
@code {

    private ResetPasswordModel model = new();
    private Dictionary<string, List<string>> errorMessages = new();
    private bool IsLoading { get; set; } = false;



    private async Task HandleReset()
    {
        IsLoading = true;
        errorMessages.Clear();
        if (model.Password != model.ConfirmPassword)
        {
            IsLoading = false;
            errorMessages[nameof(model.ConfirmPassword)] = new List<string> { "Passwords do not match." };
            return;
        }

        var response = await _authService.ResetPassword(new ResetPasswordRequest
            {
                Email = model.Email,
                Password = model.Password,
                Code = token

            });

        if (response.Status)
        {
            IsLoading = false;
            Navigation.NavigateTo("/auth/login");
        }
        else
        {
            if (response.Errors?.Count > 0)
            {
                IsLoading = false;
                errorMessages = response.Errors.ToDictionary(
                    kvp => kvp.Key,
                    kvp => kvp.Value.ToList()
                );
            }
            else if (!string.IsNullOrEmpty(response.Message))
            {
                IsLoading = false;
                ToastService.ShowError(response.Message);
            }
        }
    }

    private string? GetErrorMessage(string fieldName)
    {
        return errorMessages.ContainsKey(fieldName)
            ? errorMessages[fieldName].FirstOrDefault()
            : null;
    }



    private class ResetPasswordModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
        public string ConfirmPassword { get; set; }
    }

    [Parameter]
    public string token { get; set; } = string.Empty;

    private bool _showPassword = false;
    private bool _showConfirmPassword = false;

    private void TogglePasswordVisibility() => _showPassword = !_showPassword;
    private void ToggleConfirmPasswordVisibility() => _showConfirmPassword = !_showConfirmPassword;
}