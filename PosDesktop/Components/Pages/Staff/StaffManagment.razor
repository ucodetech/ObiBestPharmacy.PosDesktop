@page "/staff/staff-dashboard"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using PosDesktop.Services.Interfaces
@using static  PosDesktop.Components.Pages.Bread
@inject IStaffManagementService _staff
@inject IJSRuntime _js;
@inject NavigationManager navigation

<Bread Items="@pageData" />

    <div class="card-body">
        <ScrollableModal @ref="modalRef" ModalId="addUpdateStaff" Size="modal-lg" Scrollable="true">
            <HeaderContent>
                <h1 class="modal-title fs-5" id="addUpdateStaffLabel">Add/Update Staff</h1>
            </HeaderContent>
            <BodyContent>
                 <UpsertStaff UserId="@selectedUserId" /> 
            </BodyContent>
        </ScrollableModal>

    </div>
  <div class="row">
    <div class="col-md-12 col-sm-12">
        <div class="card p-3 bg-pos">
            <div class="mb-3">
                <ul class="nav nav-tabs">
                    <li class="nav-item">
                        <button class="nav-link active">Staff Management</button>
                    </li>
                    <li class="nav-item">
                        <button class="nav-link">Attendance</button>
                    </li>
                </ul>
            </div>

            <div class="d-flex justify-content-between align-items-center mb-3">
                <button type="button" class="btn btn-primary" @onclick="() => modalRef?.ShowAsync()">
                  <i class="fas fa-plus-o"></i> Add New Staff
                </button>
                <button type="button" class="btn btn-info" @onclick="ReloadPage"> <i class="bi bi-arrow-repeat"></i></button>

            </div>
            <div class="table-responsive">
                <table class="table table-light table-striped table-bordered align-middle " id="staffTable">
                <thead class="table-light">
                    <tr class="table-light">
                        <th>ID</th>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Phone</th>
                        <th>Age</th>
                        <th>Salary</th>
                        <th>Timings</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (isLoading)
                        {
                            <tr>
                                <td colspan="8" class="text-center text-white">
                                    <i class="bi bi-arrow-clockwise fa-spin"></i> Loading staff...
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

    </div>
</div>




@code {

    private Guid? selectedUserId = null;
    private void ReloadPage()
    {
        navigation.NavigateTo(navigation.Uri, forceLoad: true);
    }


    public List<BreadItem> pageData { get; set; } = new List<BreadItem>
    {
        new BreadItem
        {
            Text = "Staff",
            Url = "/staff/staff-dashboard"
        },

    };

    private ScrollableModal? modalRef;


    private List<StaffMember> staffList = new();
    private bool isLoading = true;

    private DotNetObjectReference<StaffManagment>? dotNetHelper;


    protected override async Task OnInitializedAsync()
    {
        dotNetHelper = DotNetObjectReference.Create(this);
        await LoadStaffData();
        try
        {
            await _js.InvokeVoidAsync("initDataTable", staffList, dotNetHelper);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing DataTable: {ex.Message}");
        }
    }



    private async Task LoadStaffData()
    {
        isLoading = true;
        StateHasChanged(); // Show loading indicator

        try
        {
            var response = await _staff.GetAllStaff(1, 1000);
            if (response?.Data != null)
            {
                staffList = response.Data.Select(s => new StaffMember
                    {
                        Id = s.UserId,
                        Name = $"{s.FirstName} {s.LastName}",
                        Email = s.Email,
                        Phone = s.PhoneNumber,
                        Age = s.Age,
                        Salary = s.Salary,
                        Timings = s.Timings,
                        ProfilePicture = s.ProfilePicture ?? "https://api.dicebear.com/7.x/personas/svg?seed=Random"
                    }).ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading staff: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task EditStaffFromJs(string id)
    {
        if (Guid.TryParse(id, out var guid))
        {
            selectedUserId = guid;
            await modalRef!.ShowAsync();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"Failed to parse ID: {id}");
        }
    }

    public class StaffMember
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Phone { get; set; } = string.Empty;
        public int Age { get; set; }
        public double? Salary { get; set; }
        public string? Timings { get; set; }
        public string? ProfilePicture { get; set; }
    }

    public void Dispose()
    {
        try
        {
            // Clean up DataTable and .NET reference
            _ = _js.InvokeVoidAsync("destroyDataTable");
            dotNetHelper?.Dispose();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Dispose error: {ex.Message}");
        }
    }

}



